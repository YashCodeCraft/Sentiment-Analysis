# -*- coding: utf-8 -*-
"""Naive bayes

Automatically generated by Colab.


##SENTIMENT ANALYSIS
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.pipeline import make_pipeline
from sklearn.metrics import confusion_matrix, classification_report, accuracy_score
from matplotlib import pyplot as plt
import seaborn as sns

senti_data = pd.read_csv('dataset in csv format', encoding='unicode_escape')
print(senti_data.head())

# print(senti_data.info())

print(senti_data.isnull().sum())

inputt = senti_data['selected_text']
outputt = senti_data['sentiment']

input_train, input_test, output_train, output_test = train_test_split(
    inputt, outputt, train_size=0.75, random_state=42
)

print(inputt.shape)
print()
print(input_train.shape)
print()
print(input_test.shape)

model = make_pipeline(TfidfVectorizer(), MultinomialNB())
model.fit(input_train, output_train)

sentiment_pred = model.predict(input_test)
sentiment_pred

print(classification_report(sentiment_pred, output_test))

print(confusion_matrix(sentiment_pred, output_test))

pd.DataFrame(confusion_matrix(sentiment_pred, output_test),
                   columns=['pred negative', 'pred neutral', 'pred positive'],
                   index=['actual negative', 'actual neutral', 'actual positive'])

plt.figure(figsize=(6, 4))
sns.heatmap(confusion_matrix(sentiment_pred, output_test), annot=True, cmap='YlGnBu')
plt.show()

def pred_senti(txt, modell):
  predict = modell.predict([txt])
  return predict

pred_senti("I love you", model)

sentences = int(input("Enter how many: "))
for i in range(sentences):
  print(pred_senti(input("Give: "), model))

pred_senti(input(), model)

